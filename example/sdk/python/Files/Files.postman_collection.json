{
	"info": {
		"_postman_id": "3dfe8324-3d03-44a3-b17c-08107453ec79",
		"name": "Files",
		"description": "Orq.ai files API documentation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41631900",
		"_collection_link": "https://warped-spaceship-810310.postman.co/workspace/0ae214f6-a7a0-4d14-966c-761a041670d5/collection/41631900-3dfe8324-3d03-44a3-b17c-08107453ec79?action=share&source=collection_link&creator=41631900"
	},
	"item": [
		{
			"name": "Create a file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type includes application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response is valid JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response contains file_id, object_name, and purpose\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property(\"_id\");",
							"    pm.expect(responseJson).to.have.property(\"object_name\");",
							"    pm.expect(responseJson).to.have.property(\"purpose\", \"retrieval\");",
							"    pm.expect(responseJson).to.have.property(\"bytes\");",
							"});",
							"",
							"pm.test(\"Request contains Bearer token\", function () {",
							"    pm.expect(pm.request.headers.get(\"Authorization\")).to.include(\"Bearer \");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "postman-cloud:///1eff445e-3d7b-44a0-b97d-e795c07809ee"
						},
						{
							"key": "purpose",
							"value": "retrieval",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://api.staging.orq.ai/v2/files",
					"protocol": "https",
					"host": [
						"api",
						"staging",
						"orq",
						"ai"
					],
					"path": [
						"v2",
						"files"
					]
				}
			},
			"response": []
		},
		{
			"name": "List files",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type includes application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response is valid JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response contains file_id, object_name, and purpose for each item\", function () {",
							"    const responseJson = pm.response.json();",
							"    responseJson.forEach(item => {",
							"        pm.expect(item).to.have.property(\"_id\");",
							"        pm.expect(item).to.have.property(\"object_name\");",
							"        pm.expect(item).to.have.property(\"purpose\", \"retrieval\");",
							"        pm.expect(item).to.have.property(\"bytes\");",
							"    });",
							"});",
							"",
							"pm.test(\"Request contains Bearer token\", function () {",
							"    pm.expect(pm.request.headers.get(\"Authorization\")).to.include(\"Bearer \");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.staging.orq.ai/v2/files",
					"protocol": "https",
					"host": [
						"api",
						"staging",
						"orq",
						"ai"
					],
					"path": [
						"v2",
						"files"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve a file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type includes application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response is valid JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Request contains Bearer token\", function () {",
							"    pm.expect(pm.request.headers.get(\"Authorization\")).to.include(\"Bearer \");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.staging.orq.ai/v2/files/{{fileId}}",
					"protocol": "https",
					"host": [
						"api",
						"staging",
						"orq",
						"ai"
					],
					"path": [
						"v2",
						"files",
						"{{fileId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 204 on successful deletion",
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"// Test to confirm response body is empty",
							"pm.test(\"Dataset is deleted (response body is empty)\", function () {",
							"    pm.expect(pm.response.text()).to.be.empty;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.staging.orq.ai/v2/files/{{fileId}}",
					"protocol": "https",
					"host": [
						"api",
						"staging",
						"orq",
						"ai"
					],
					"path": [
						"v2",
						"files",
						"{{fileId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "fileId",
			"value": "",
			"type": "default"
		}
	]
}